// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: sip.proto

package finazon_grpc_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SipService_GetTrades_FullMethodName       = "/finazon.SipService/GetTrades"
	SipService_GetMarketCenter_FullMethodName = "/finazon.SipService/GetMarketCenter"
)

// SipServiceClient is the client API for SipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SipServiceClient interface {
	// Returns detailed information on trades executed through the Securities Information Processor (SIP)
	GetTrades(ctx context.Context, in *GetSipTradesRequest, opts ...grpc.CallOption) (*GetSipTradesResponse, error)
	// Returns a list of market centers
	GetMarketCenter(ctx context.Context, in *GetSipMarketCenterRequest, opts ...grpc.CallOption) (*GetSipMarketCenterResponse, error)
}

type sipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSipServiceClient(cc grpc.ClientConnInterface) SipServiceClient {
	return &sipServiceClient{cc}
}

func (c *sipServiceClient) GetTrades(ctx context.Context, in *GetSipTradesRequest, opts ...grpc.CallOption) (*GetSipTradesResponse, error) {
	out := new(GetSipTradesResponse)
	err := c.cc.Invoke(ctx, SipService_GetTrades_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipServiceClient) GetMarketCenter(ctx context.Context, in *GetSipMarketCenterRequest, opts ...grpc.CallOption) (*GetSipMarketCenterResponse, error) {
	out := new(GetSipMarketCenterResponse)
	err := c.cc.Invoke(ctx, SipService_GetMarketCenter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SipServiceServer is the server API for SipService service.
// All implementations must embed UnimplementedSipServiceServer
// for forward compatibility
type SipServiceServer interface {
	// Returns detailed information on trades executed through the Securities Information Processor (SIP)
	GetTrades(context.Context, *GetSipTradesRequest) (*GetSipTradesResponse, error)
	// Returns a list of market centers
	GetMarketCenter(context.Context, *GetSipMarketCenterRequest) (*GetSipMarketCenterResponse, error)
	mustEmbedUnimplementedSipServiceServer()
}

// UnimplementedSipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSipServiceServer struct {
}

func (UnimplementedSipServiceServer) GetTrades(context.Context, *GetSipTradesRequest) (*GetSipTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrades not implemented")
}
func (UnimplementedSipServiceServer) GetMarketCenter(context.Context, *GetSipMarketCenterRequest) (*GetSipMarketCenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketCenter not implemented")
}
func (UnimplementedSipServiceServer) mustEmbedUnimplementedSipServiceServer() {}

// UnsafeSipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SipServiceServer will
// result in compilation errors.
type UnsafeSipServiceServer interface {
	mustEmbedUnimplementedSipServiceServer()
}

func RegisterSipServiceServer(s grpc.ServiceRegistrar, srv SipServiceServer) {
	s.RegisterService(&SipService_ServiceDesc, srv)
}

func _SipService_GetTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSipTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipServiceServer).GetTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipService_GetTrades_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipServiceServer).GetTrades(ctx, req.(*GetSipTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipService_GetMarketCenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSipMarketCenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipServiceServer).GetMarketCenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipService_GetMarketCenter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipServiceServer).GetMarketCenter(ctx, req.(*GetSipMarketCenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SipService_ServiceDesc is the grpc.ServiceDesc for SipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finazon.SipService",
	HandlerType: (*SipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrades",
			Handler:    _SipService_GetTrades_Handler,
		},
		{
			MethodName: "GetMarketCenter",
			Handler:    _SipService_GetMarketCenter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sip.proto",
}
