// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: exchange.proto

package finazon_grpc_go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExchangeService_GetMarketsCrypto_FullMethodName = "/finazon.ExchangeService/GetMarketsCrypto"
	ExchangeService_GetMarketsStocks_FullMethodName = "/finazon.ExchangeService/GetMarketsStocks"
)

// ExchangeServiceClient is the client API for ExchangeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeServiceClient interface {
	// Returns a list of supported crypto markets
	GetMarketsCrypto(ctx context.Context, in *GetMarketsCryptoRequest, opts ...grpc.CallOption) (*GetMarketsCryptoResponse, error)
	// Returns a list of supported stock markets
	GetMarketsStocks(ctx context.Context, in *GetMarketsStocksRequest, opts ...grpc.CallOption) (*GetMarketsStocksResponse, error)
}

type exchangeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeServiceClient(cc grpc.ClientConnInterface) ExchangeServiceClient {
	return &exchangeServiceClient{cc}
}

func (c *exchangeServiceClient) GetMarketsCrypto(ctx context.Context, in *GetMarketsCryptoRequest, opts ...grpc.CallOption) (*GetMarketsCryptoResponse, error) {
	out := new(GetMarketsCryptoResponse)
	err := c.cc.Invoke(ctx, ExchangeService_GetMarketsCrypto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeServiceClient) GetMarketsStocks(ctx context.Context, in *GetMarketsStocksRequest, opts ...grpc.CallOption) (*GetMarketsStocksResponse, error) {
	out := new(GetMarketsStocksResponse)
	err := c.cc.Invoke(ctx, ExchangeService_GetMarketsStocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeServiceServer is the server API for ExchangeService service.
// All implementations must embed UnimplementedExchangeServiceServer
// for forward compatibility
type ExchangeServiceServer interface {
	// Returns a list of supported crypto markets
	GetMarketsCrypto(context.Context, *GetMarketsCryptoRequest) (*GetMarketsCryptoResponse, error)
	// Returns a list of supported stock markets
	GetMarketsStocks(context.Context, *GetMarketsStocksRequest) (*GetMarketsStocksResponse, error)
	mustEmbedUnimplementedExchangeServiceServer()
}

// UnimplementedExchangeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeServiceServer struct {
}

func (UnimplementedExchangeServiceServer) GetMarketsCrypto(context.Context, *GetMarketsCryptoRequest) (*GetMarketsCryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketsCrypto not implemented")
}
func (UnimplementedExchangeServiceServer) GetMarketsStocks(context.Context, *GetMarketsStocksRequest) (*GetMarketsStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketsStocks not implemented")
}
func (UnimplementedExchangeServiceServer) mustEmbedUnimplementedExchangeServiceServer() {}

// UnsafeExchangeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeServiceServer will
// result in compilation errors.
type UnsafeExchangeServiceServer interface {
	mustEmbedUnimplementedExchangeServiceServer()
}

func RegisterExchangeServiceServer(s grpc.ServiceRegistrar, srv ExchangeServiceServer) {
	s.RegisterService(&ExchangeService_ServiceDesc, srv)
}

func _ExchangeService_GetMarketsCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketsCryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).GetMarketsCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_GetMarketsCrypto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).GetMarketsCrypto(ctx, req.(*GetMarketsCryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeService_GetMarketsStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketsStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeServiceServer).GetMarketsStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExchangeService_GetMarketsStocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeServiceServer).GetMarketsStocks(ctx, req.(*GetMarketsStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExchangeService_ServiceDesc is the grpc.ServiceDesc for ExchangeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finazon.ExchangeService",
	HandlerType: (*ExchangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMarketsCrypto",
			Handler:    _ExchangeService_GetMarketsCrypto_Handler,
		},
		{
			MethodName: "GetMarketsStocks",
			Handler:    _ExchangeService_GetMarketsStocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exchange.proto",
}
