// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: benzinga.proto

package finazon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BenzingaService_GetDividentsCalendar_FullMethodName = "/finazon.BenzingaService/GetDividentsCalendar"
	BenzingaService_GetEarningsCalendar_FullMethodName  = "/finazon.BenzingaService/GetEarningsCalendar"
	BenzingaService_GetNews_FullMethodName              = "/finazon.BenzingaService/GetNews"
	BenzingaService_GetIPO_FullMethodName               = "/finazon.BenzingaService/GetIPO"
)

// BenzingaServiceClient is the client API for BenzingaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenzingaServiceClient interface {
	// Returns the dividends calendar from Benzinga
	GetDividentsCalendar(ctx context.Context, in *GetDividentsCalendarRequest, opts ...grpc.CallOption) (*GetDividentsCalendarResponse, error)
	// Returns the earnings calendar from Benzinga
	GetEarningsCalendar(ctx context.Context, in *GetEarningsCalendarRequest, opts ...grpc.CallOption) (*GetEarningsCalendarResponse, error)
	// Returns the news articles from Benzinga
	GetNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*GetNewsResponse, error)
	// Returns IPO data from Benzinga
	GetIPO(ctx context.Context, in *GetIPORequest, opts ...grpc.CallOption) (*GetIPOResponse, error)
}

type benzingaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBenzingaServiceClient(cc grpc.ClientConnInterface) BenzingaServiceClient {
	return &benzingaServiceClient{cc}
}

func (c *benzingaServiceClient) GetDividentsCalendar(ctx context.Context, in *GetDividentsCalendarRequest, opts ...grpc.CallOption) (*GetDividentsCalendarResponse, error) {
	out := new(GetDividentsCalendarResponse)
	err := c.cc.Invoke(ctx, BenzingaService_GetDividentsCalendar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benzingaServiceClient) GetEarningsCalendar(ctx context.Context, in *GetEarningsCalendarRequest, opts ...grpc.CallOption) (*GetEarningsCalendarResponse, error) {
	out := new(GetEarningsCalendarResponse)
	err := c.cc.Invoke(ctx, BenzingaService_GetEarningsCalendar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benzingaServiceClient) GetNews(ctx context.Context, in *GetNewsRequest, opts ...grpc.CallOption) (*GetNewsResponse, error) {
	out := new(GetNewsResponse)
	err := c.cc.Invoke(ctx, BenzingaService_GetNews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benzingaServiceClient) GetIPO(ctx context.Context, in *GetIPORequest, opts ...grpc.CallOption) (*GetIPOResponse, error) {
	out := new(GetIPOResponse)
	err := c.cc.Invoke(ctx, BenzingaService_GetIPO_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenzingaServiceServer is the server API for BenzingaService service.
// All implementations must embed UnimplementedBenzingaServiceServer
// for forward compatibility
type BenzingaServiceServer interface {
	// Returns the dividends calendar from Benzinga
	GetDividentsCalendar(context.Context, *GetDividentsCalendarRequest) (*GetDividentsCalendarResponse, error)
	// Returns the earnings calendar from Benzinga
	GetEarningsCalendar(context.Context, *GetEarningsCalendarRequest) (*GetEarningsCalendarResponse, error)
	// Returns the news articles from Benzinga
	GetNews(context.Context, *GetNewsRequest) (*GetNewsResponse, error)
	// Returns IPO data from Benzinga
	GetIPO(context.Context, *GetIPORequest) (*GetIPOResponse, error)
	mustEmbedUnimplementedBenzingaServiceServer()
}

// UnimplementedBenzingaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBenzingaServiceServer struct {
}

func (UnimplementedBenzingaServiceServer) GetDividentsCalendar(context.Context, *GetDividentsCalendarRequest) (*GetDividentsCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDividentsCalendar not implemented")
}
func (UnimplementedBenzingaServiceServer) GetEarningsCalendar(context.Context, *GetEarningsCalendarRequest) (*GetEarningsCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEarningsCalendar not implemented")
}
func (UnimplementedBenzingaServiceServer) GetNews(context.Context, *GetNewsRequest) (*GetNewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNews not implemented")
}
func (UnimplementedBenzingaServiceServer) GetIPO(context.Context, *GetIPORequest) (*GetIPOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPO not implemented")
}
func (UnimplementedBenzingaServiceServer) mustEmbedUnimplementedBenzingaServiceServer() {}

// UnsafeBenzingaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenzingaServiceServer will
// result in compilation errors.
type UnsafeBenzingaServiceServer interface {
	mustEmbedUnimplementedBenzingaServiceServer()
}

func RegisterBenzingaServiceServer(s grpc.ServiceRegistrar, srv BenzingaServiceServer) {
	s.RegisterService(&BenzingaService_ServiceDesc, srv)
}

func _BenzingaService_GetDividentsCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDividentsCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenzingaServiceServer).GetDividentsCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenzingaService_GetDividentsCalendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenzingaServiceServer).GetDividentsCalendar(ctx, req.(*GetDividentsCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenzingaService_GetEarningsCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEarningsCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenzingaServiceServer).GetEarningsCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenzingaService_GetEarningsCalendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenzingaServiceServer).GetEarningsCalendar(ctx, req.(*GetEarningsCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenzingaService_GetNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenzingaServiceServer).GetNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenzingaService_GetNews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenzingaServiceServer).GetNews(ctx, req.(*GetNewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BenzingaService_GetIPO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIPORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenzingaServiceServer).GetIPO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenzingaService_GetIPO_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenzingaServiceServer).GetIPO(ctx, req.(*GetIPORequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BenzingaService_ServiceDesc is the grpc.ServiceDesc for BenzingaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BenzingaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finazon.BenzingaService",
	HandlerType: (*BenzingaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDividentsCalendar",
			Handler:    _BenzingaService_GetDividentsCalendar_Handler,
		},
		{
			MethodName: "GetEarningsCalendar",
			Handler:    _BenzingaService_GetEarningsCalendar_Handler,
		},
		{
			MethodName: "GetNews",
			Handler:    _BenzingaService_GetNews_Handler,
		},
		{
			MethodName: "GetIPO",
			Handler:    _BenzingaService_GetIPO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "benzinga.proto",
}
