// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.21.12
// source: tickers.proto

package finazon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TickerStocksInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker   string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Country  string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	// string mic = 4;
	Publisher     string `protobuf:"bytes,4,opt,name=publisher,proto3" json:"publisher,omitempty"`
	PublisherName string `protobuf:"bytes,5,opt,name=publisher_name,json=publisherName,proto3" json:"publisher_name,omitempty"`
}

func (x *TickerStocksInfo) Reset() {
	*x = TickerStocksInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerStocksInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerStocksInfo) ProtoMessage() {}

func (x *TickerStocksInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tickers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerStocksInfo.ProtoReflect.Descriptor instead.
func (*TickerStocksInfo) Descriptor() ([]byte, []int) {
	return file_tickers_proto_rawDescGZIP(), []int{0}
}

func (x *TickerStocksInfo) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *TickerStocksInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *TickerStocksInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TickerStocksInfo) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *TickerStocksInfo) GetPublisherName() string {
	if x != nil {
		return x.PublisherName
	}
	return ""
}

type FindTickersStocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker        string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Publisher     string `protobuf:"bytes,2,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Country       string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	Mic           string `protobuf:"bytes,4,opt,name=mic,proto3" json:"mic,omitempty"`
	Page          int32  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Cqs           string `protobuf:"bytes,11,opt,name=cqs,proto3" json:"cqs,omitempty"`
	Cik           string `protobuf:"bytes,12,opt,name=cik,proto3" json:"cik,omitempty"`
	Cusip         string `protobuf:"bytes,13,opt,name=cusip,proto3" json:"cusip,omitempty"`
	Isin          string `protobuf:"bytes,14,opt,name=isin,proto3" json:"isin,omitempty"`
	CompositeFigi string `protobuf:"bytes,15,opt,name=composite_figi,json=compositeFigi,proto3" json:"composite_figi,omitempty"`
	ShareFigi     string `protobuf:"bytes,16,opt,name=share_figi,json=shareFigi,proto3" json:"share_figi,omitempty"`
	Lei           string `protobuf:"bytes,17,opt,name=lei,proto3" json:"lei,omitempty"`
	Dataset       string `protobuf:"bytes,18,opt,name=dataset,proto3" json:"dataset,omitempty"`
}

func (x *FindTickersStocksRequest) Reset() {
	*x = FindTickersStocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTickersStocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTickersStocksRequest) ProtoMessage() {}

func (x *FindTickersStocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tickers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTickersStocksRequest.ProtoReflect.Descriptor instead.
func (*FindTickersStocksRequest) Descriptor() ([]byte, []int) {
	return file_tickers_proto_rawDescGZIP(), []int{1}
}

func (x *FindTickersStocksRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *FindTickersStocksRequest) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *FindTickersStocksRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *FindTickersStocksRequest) GetMic() string {
	if x != nil {
		return x.Mic
	}
	return ""
}

func (x *FindTickersStocksRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindTickersStocksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FindTickersStocksRequest) GetCqs() string {
	if x != nil {
		return x.Cqs
	}
	return ""
}

func (x *FindTickersStocksRequest) GetCik() string {
	if x != nil {
		return x.Cik
	}
	return ""
}

func (x *FindTickersStocksRequest) GetCusip() string {
	if x != nil {
		return x.Cusip
	}
	return ""
}

func (x *FindTickersStocksRequest) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *FindTickersStocksRequest) GetCompositeFigi() string {
	if x != nil {
		return x.CompositeFigi
	}
	return ""
}

func (x *FindTickersStocksRequest) GetShareFigi() string {
	if x != nil {
		return x.ShareFigi
	}
	return ""
}

func (x *FindTickersStocksRequest) GetLei() string {
	if x != nil {
		return x.Lei
	}
	return ""
}

func (x *FindTickersStocksRequest) GetDataset() string {
	if x != nil {
		return x.Dataset
	}
	return ""
}

type FindTickersStocksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*TickerStocksInfo `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *FindTickersStocksResponse) Reset() {
	*x = FindTickersStocksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTickersStocksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTickersStocksResponse) ProtoMessage() {}

func (x *FindTickersStocksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tickers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTickersStocksResponse.ProtoReflect.Descriptor instead.
func (*FindTickersStocksResponse) Descriptor() ([]byte, []int) {
	return file_tickers_proto_rawDescGZIP(), []int{2}
}

func (x *FindTickersStocksResponse) GetResult() []*TickerStocksInfo {
	if x != nil {
		return x.Result
	}
	return nil
}

type TickerCryptoInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker        string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Publisher     string `protobuf:"bytes,2,opt,name=publisher,proto3" json:"publisher,omitempty"`
	PublisherName string `protobuf:"bytes,3,opt,name=publisher_name,json=publisherName,proto3" json:"publisher_name,omitempty"`
}

func (x *TickerCryptoInfo) Reset() {
	*x = TickerCryptoInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerCryptoInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerCryptoInfo) ProtoMessage() {}

func (x *TickerCryptoInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tickers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerCryptoInfo.ProtoReflect.Descriptor instead.
func (*TickerCryptoInfo) Descriptor() ([]byte, []int) {
	return file_tickers_proto_rawDescGZIP(), []int{3}
}

func (x *TickerCryptoInfo) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *TickerCryptoInfo) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *TickerCryptoInfo) GetPublisherName() string {
	if x != nil {
		return x.PublisherName
	}
	return ""
}

type FindTickersCryptoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker    string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Publisher string `protobuf:"bytes,2,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Market    string `protobuf:"bytes,3,opt,name=market,proto3" json:"market,omitempty"`
	Page      int32  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int32  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *FindTickersCryptoRequest) Reset() {
	*x = FindTickersCryptoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTickersCryptoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTickersCryptoRequest) ProtoMessage() {}

func (x *FindTickersCryptoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tickers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTickersCryptoRequest.ProtoReflect.Descriptor instead.
func (*FindTickersCryptoRequest) Descriptor() ([]byte, []int) {
	return file_tickers_proto_rawDescGZIP(), []int{4}
}

func (x *FindTickersCryptoRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *FindTickersCryptoRequest) GetPublisher() string {
	if x != nil {
		return x.Publisher
	}
	return ""
}

func (x *FindTickersCryptoRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *FindTickersCryptoRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindTickersCryptoRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type FindTickersCryptoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*TickerCryptoInfo `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *FindTickersCryptoResponse) Reset() {
	*x = FindTickersCryptoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTickersCryptoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTickersCryptoResponse) ProtoMessage() {}

func (x *FindTickersCryptoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tickers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTickersCryptoResponse.ProtoReflect.Descriptor instead.
func (*FindTickersCryptoResponse) Descriptor() ([]byte, []int) {
	return file_tickers_proto_rawDescGZIP(), []int{5}
}

func (x *FindTickersCryptoResponse) GetResult() []*TickerCryptoInfo {
	if x != nil {
		return x.Result
	}
	return nil
}

type TickerForexInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
}

func (x *TickerForexInfo) Reset() {
	*x = TickerForexInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerForexInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerForexInfo) ProtoMessage() {}

func (x *TickerForexInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tickers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerForexInfo.ProtoReflect.Descriptor instead.
func (*TickerForexInfo) Descriptor() ([]byte, []int) {
	return file_tickers_proto_rawDescGZIP(), []int{6}
}

func (x *TickerForexInfo) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

type FindTickersForexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker   string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Page     int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *FindTickersForexRequest) Reset() {
	*x = FindTickersForexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTickersForexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTickersForexRequest) ProtoMessage() {}

func (x *FindTickersForexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tickers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTickersForexRequest.ProtoReflect.Descriptor instead.
func (*FindTickersForexRequest) Descriptor() ([]byte, []int) {
	return file_tickers_proto_rawDescGZIP(), []int{7}
}

func (x *FindTickersForexRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *FindTickersForexRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindTickersForexRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type FindTickersForexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*TickerForexInfo `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *FindTickersForexResponse) Reset() {
	*x = FindTickersForexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickers_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTickersForexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTickersForexResponse) ProtoMessage() {}

func (x *FindTickersForexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tickers_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTickersForexResponse.ProtoReflect.Descriptor instead.
func (*FindTickersForexResponse) Descriptor() ([]byte, []int) {
	return file_tickers_proto_rawDescGZIP(), []int{8}
}

func (x *FindTickersForexResponse) GetResult() []*TickerForexInfo {
	if x != nil {
		return x.Result
	}
	return nil
}

// US tickers
type TickerUSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker        string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Currency      string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	Security      string `protobuf:"bytes,3,opt,name=security,proto3" json:"security,omitempty"`
	Mic           string `protobuf:"bytes,4,opt,name=mic,proto3" json:"mic,omitempty"`
	AssetType     string `protobuf:"bytes,5,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`
	Cik           string `protobuf:"bytes,7,opt,name=cik,proto3" json:"cik,omitempty"`
	CompositeFigi string `protobuf:"bytes,10,opt,name=composite_figi,json=compositeFigi,proto3" json:"composite_figi,omitempty"`
	ShareFigi     string `protobuf:"bytes,11,opt,name=share_figi,json=shareFigi,proto3" json:"share_figi,omitempty"`
	Lei           string `protobuf:"bytes,12,opt,name=lei,proto3" json:"lei,omitempty"`
}

func (x *TickerUSInfo) Reset() {
	*x = TickerUSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickers_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerUSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerUSInfo) ProtoMessage() {}

func (x *TickerUSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tickers_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerUSInfo.ProtoReflect.Descriptor instead.
func (*TickerUSInfo) Descriptor() ([]byte, []int) {
	return file_tickers_proto_rawDescGZIP(), []int{9}
}

func (x *TickerUSInfo) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *TickerUSInfo) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TickerUSInfo) GetSecurity() string {
	if x != nil {
		return x.Security
	}
	return ""
}

func (x *TickerUSInfo) GetMic() string {
	if x != nil {
		return x.Mic
	}
	return ""
}

func (x *TickerUSInfo) GetAssetType() string {
	if x != nil {
		return x.AssetType
	}
	return ""
}

func (x *TickerUSInfo) GetCik() string {
	if x != nil {
		return x.Cik
	}
	return ""
}

func (x *TickerUSInfo) GetCompositeFigi() string {
	if x != nil {
		return x.CompositeFigi
	}
	return ""
}

func (x *TickerUSInfo) GetShareFigi() string {
	if x != nil {
		return x.ShareFigi
	}
	return ""
}

func (x *TickerUSInfo) GetLei() string {
	if x != nil {
		return x.Lei
	}
	return ""
}

type FindTickersUSRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker        string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Mic           string `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	Page          int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Cqs           string `protobuf:"bytes,5,opt,name=cqs,proto3" json:"cqs,omitempty"`
	Cik           string `protobuf:"bytes,6,opt,name=cik,proto3" json:"cik,omitempty"`
	Cusip         string `protobuf:"bytes,7,opt,name=cusip,proto3" json:"cusip,omitempty"`
	Isin          string `protobuf:"bytes,8,opt,name=isin,proto3" json:"isin,omitempty"`
	CompositeFigi string `protobuf:"bytes,9,opt,name=composite_figi,json=compositeFigi,proto3" json:"composite_figi,omitempty"`
	ShareFigi     string `protobuf:"bytes,10,opt,name=share_figi,json=shareFigi,proto3" json:"share_figi,omitempty"`
	Lei           string `protobuf:"bytes,11,opt,name=lei,proto3" json:"lei,omitempty"`
}

func (x *FindTickersUSRequest) Reset() {
	*x = FindTickersUSRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickers_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTickersUSRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTickersUSRequest) ProtoMessage() {}

func (x *FindTickersUSRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tickers_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTickersUSRequest.ProtoReflect.Descriptor instead.
func (*FindTickersUSRequest) Descriptor() ([]byte, []int) {
	return file_tickers_proto_rawDescGZIP(), []int{10}
}

func (x *FindTickersUSRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *FindTickersUSRequest) GetMic() string {
	if x != nil {
		return x.Mic
	}
	return ""
}

func (x *FindTickersUSRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindTickersUSRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *FindTickersUSRequest) GetCqs() string {
	if x != nil {
		return x.Cqs
	}
	return ""
}

func (x *FindTickersUSRequest) GetCik() string {
	if x != nil {
		return x.Cik
	}
	return ""
}

func (x *FindTickersUSRequest) GetCusip() string {
	if x != nil {
		return x.Cusip
	}
	return ""
}

func (x *FindTickersUSRequest) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *FindTickersUSRequest) GetCompositeFigi() string {
	if x != nil {
		return x.CompositeFigi
	}
	return ""
}

func (x *FindTickersUSRequest) GetShareFigi() string {
	if x != nil {
		return x.ShareFigi
	}
	return ""
}

func (x *FindTickersUSRequest) GetLei() string {
	if x != nil {
		return x.Lei
	}
	return ""
}

type FindTickersUSResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*TickerUSInfo `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *FindTickersUSResponse) Reset() {
	*x = FindTickersUSResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tickers_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindTickersUSResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindTickersUSResponse) ProtoMessage() {}

func (x *FindTickersUSResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tickers_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindTickersUSResponse.ProtoReflect.Descriptor instead.
func (*FindTickersUSResponse) Descriptor() ([]byte, []int) {
	return file_tickers_proto_rawDescGZIP(), []int{11}
}

func (x *FindTickersUSResponse) GetResult() []*TickerUSInfo {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_tickers_proto protoreflect.FileDescriptor

var file_tickers_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x22, 0xa5, 0x01, 0x0a, 0x10, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xed, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x71, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x71, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x69, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73,
	0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x69,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x46, 0x69, 0x67, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x66,
	0x69, 0x67, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x46, 0x69, 0x67, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6c, 0x65, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x22, 0x4e, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x6f, 0x0a, 0x10, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4e, 0x0a,
	0x19, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x29, 0x0a,
	0x0f, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x62, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4c, 0x0a, 0x18,
	0x46, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a,
	0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf9, 0x01, 0x0a, 0x0c, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x55, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x63, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x6b, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x69,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x46, 0x69, 0x67, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x66,
	0x69, 0x67, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x46, 0x69, 0x67, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6c, 0x65, 0x69, 0x22, 0x97, 0x02, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x55, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x71,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x71, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x75, 0x73, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x46, 0x69, 0x67, 0x69, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x69, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x67, 0x69, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x65, 0x69, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x65, 0x69,
	0x22, 0x46, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x55,
	0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x7a, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x55, 0x53, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0xf9, 0x02, 0x0a, 0x0e, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x46,
	0x69, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x21, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x11, 0x46, 0x69, 0x6e,
	0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x21,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x73, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64, 0x54,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x12, 0x20, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72,
	0x73, 0x55, 0x53, 0x12, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x46, 0x69,
	0x6e, 0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x55, 0x53, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6e,
	0x64, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x55, 0x53, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tickers_proto_rawDescOnce sync.Once
	file_tickers_proto_rawDescData = file_tickers_proto_rawDesc
)

func file_tickers_proto_rawDescGZIP() []byte {
	file_tickers_proto_rawDescOnce.Do(func() {
		file_tickers_proto_rawDescData = protoimpl.X.CompressGZIP(file_tickers_proto_rawDescData)
	})
	return file_tickers_proto_rawDescData
}

var file_tickers_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_tickers_proto_goTypes = []interface{}{
	(*TickerStocksInfo)(nil),          // 0: finazon.TickerStocksInfo
	(*FindTickersStocksRequest)(nil),  // 1: finazon.FindTickersStocksRequest
	(*FindTickersStocksResponse)(nil), // 2: finazon.FindTickersStocksResponse
	(*TickerCryptoInfo)(nil),          // 3: finazon.TickerCryptoInfo
	(*FindTickersCryptoRequest)(nil),  // 4: finazon.FindTickersCryptoRequest
	(*FindTickersCryptoResponse)(nil), // 5: finazon.FindTickersCryptoResponse
	(*TickerForexInfo)(nil),           // 6: finazon.TickerForexInfo
	(*FindTickersForexRequest)(nil),   // 7: finazon.FindTickersForexRequest
	(*FindTickersForexResponse)(nil),  // 8: finazon.FindTickersForexResponse
	(*TickerUSInfo)(nil),              // 9: finazon.TickerUSInfo
	(*FindTickersUSRequest)(nil),      // 10: finazon.FindTickersUSRequest
	(*FindTickersUSResponse)(nil),     // 11: finazon.FindTickersUSResponse
}
var file_tickers_proto_depIdxs = []int32{
	0,  // 0: finazon.FindTickersStocksResponse.result:type_name -> finazon.TickerStocksInfo
	3,  // 1: finazon.FindTickersCryptoResponse.result:type_name -> finazon.TickerCryptoInfo
	6,  // 2: finazon.FindTickersForexResponse.result:type_name -> finazon.TickerForexInfo
	9,  // 3: finazon.FindTickersUSResponse.result:type_name -> finazon.TickerUSInfo
	1,  // 4: finazon.TickersService.FindTickersStocks:input_type -> finazon.FindTickersStocksRequest
	4,  // 5: finazon.TickersService.FindTickersCrypto:input_type -> finazon.FindTickersCryptoRequest
	7,  // 6: finazon.TickersService.FindTickersForex:input_type -> finazon.FindTickersForexRequest
	10, // 7: finazon.TickersService.FindTickersUS:input_type -> finazon.FindTickersUSRequest
	2,  // 8: finazon.TickersService.FindTickersStocks:output_type -> finazon.FindTickersStocksResponse
	5,  // 9: finazon.TickersService.FindTickersCrypto:output_type -> finazon.FindTickersCryptoResponse
	8,  // 10: finazon.TickersService.FindTickersForex:output_type -> finazon.FindTickersForexResponse
	11, // 11: finazon.TickersService.FindTickersUS:output_type -> finazon.FindTickersUSResponse
	8,  // [8:12] is the sub-list for method output_type
	4,  // [4:8] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_tickers_proto_init() }
func file_tickers_proto_init() {
	if File_tickers_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tickers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerStocksInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTickersStocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTickersStocksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerCryptoInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTickersCryptoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTickersCryptoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerForexInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickers_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTickersForexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickers_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTickersForexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickers_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerUSInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickers_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTickersUSRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tickers_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindTickersUSResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tickers_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tickers_proto_goTypes,
		DependencyIndexes: file_tickers_proto_depIdxs,
		MessageInfos:      file_tickers_proto_msgTypes,
	}.Build()
	File_tickers_proto = out.File
	file_tickers_proto_rawDesc = nil
	file_tickers_proto_goTypes = nil
	file_tickers_proto_depIdxs = nil
}
