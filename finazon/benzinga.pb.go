// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.12
// source: benzinga.proto

package finazon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetDividentsCalendarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker        string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Date          string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	StartAt       int64  `protobuf:"varint,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt         int64  `protobuf:"varint,4,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Page          int32  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Order         string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	Cqs           string `protobuf:"bytes,8,opt,name=cqs,proto3" json:"cqs,omitempty"`
	Cik           string `protobuf:"bytes,9,opt,name=cik,proto3" json:"cik,omitempty"`
	Cusip         string `protobuf:"bytes,10,opt,name=cusip,proto3" json:"cusip,omitempty"`
	Isin          string `protobuf:"bytes,11,opt,name=isin,proto3" json:"isin,omitempty"`
	CompositeFigi string `protobuf:"bytes,12,opt,name=composite_figi,json=compositeFigi,proto3" json:"composite_figi,omitempty"`
	ShareFigi     string `protobuf:"bytes,13,opt,name=share_figi,json=shareFigi,proto3" json:"share_figi,omitempty"`
	Lei           string `protobuf:"bytes,14,opt,name=lei,proto3" json:"lei,omitempty"`
}

func (x *GetDividentsCalendarRequest) Reset() {
	*x = GetDividentsCalendarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividentsCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividentsCalendarRequest) ProtoMessage() {}

func (x *GetDividentsCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividentsCalendarRequest.ProtoReflect.Descriptor instead.
func (*GetDividentsCalendarRequest) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{0}
}

func (x *GetDividentsCalendarRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *GetDividentsCalendarRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetDividentsCalendarRequest) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *GetDividentsCalendarRequest) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *GetDividentsCalendarRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetDividentsCalendarRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetDividentsCalendarRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *GetDividentsCalendarRequest) GetCqs() string {
	if x != nil {
		return x.Cqs
	}
	return ""
}

func (x *GetDividentsCalendarRequest) GetCik() string {
	if x != nil {
		return x.Cik
	}
	return ""
}

func (x *GetDividentsCalendarRequest) GetCusip() string {
	if x != nil {
		return x.Cusip
	}
	return ""
}

func (x *GetDividentsCalendarRequest) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *GetDividentsCalendarRequest) GetCompositeFigi() string {
	if x != nil {
		return x.CompositeFigi
	}
	return ""
}

func (x *GetDividentsCalendarRequest) GetShareFigi() string {
	if x != nil {
		return x.ShareFigi
	}
	return ""
}

func (x *GetDividentsCalendarRequest) GetLei() string {
	if x != nil {
		return x.Lei
	}
	return ""
}

type GetDividentsCalendarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*DividentsCalendarItem `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetDividentsCalendarResponse) Reset() {
	*x = GetDividentsCalendarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDividentsCalendarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDividentsCalendarResponse) ProtoMessage() {}

func (x *GetDividentsCalendarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDividentsCalendarResponse.ProtoReflect.Descriptor instead.
func (*GetDividentsCalendarResponse) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{1}
}

func (x *GetDividentsCalendarResponse) GetResult() []*DividentsCalendarItem {
	if x != nil {
		return x.Result
	}
	return nil
}

type DividentsCalendarItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId           string  `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Ticker             string  `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Name               string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Mic                string  `protobuf:"bytes,4,opt,name=mic,proto3" json:"mic,omitempty"`
	Currency           string  `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	ExDividendDate     string  `protobuf:"bytes,6,opt,name=ex_dividend_date,json=exDividendDate,proto3" json:"ex_dividend_date,omitempty"`
	DividendType       string  `protobuf:"bytes,7,opt,name=dividend_type,json=dividendType,proto3" json:"dividend_type,omitempty"`
	Dividend           float64 `protobuf:"fixed64,8,opt,name=dividend,proto3" json:"dividend,omitempty"`
	DividendYield      float64 `protobuf:"fixed64,9,opt,name=dividend_yield,json=dividendYield,proto3" json:"dividend_yield,omitempty"`
	DividendPrior      string  `protobuf:"bytes,10,opt,name=dividend_prior,json=dividendPrior,proto3" json:"dividend_prior,omitempty"`
	DeclarationDate    string  `protobuf:"bytes,11,opt,name=declaration_date,json=declarationDate,proto3" json:"declaration_date,omitempty"`
	PayableDate        string  `protobuf:"bytes,12,opt,name=payable_date,json=payableDate,proto3" json:"payable_date,omitempty"`
	RecordDate         string  `protobuf:"bytes,13,opt,name=record_date,json=recordDate,proto3" json:"record_date,omitempty"`
	EndRegularDividend bool    `protobuf:"varint,14,opt,name=end_regular_dividend,json=endRegularDividend,proto3" json:"end_regular_dividend,omitempty"`
	Frequency          int32   `protobuf:"varint,15,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Importance         int32   `protobuf:"varint,16,opt,name=importance,proto3" json:"importance,omitempty"`
	Notes              string  `protobuf:"bytes,17,opt,name=notes,proto3" json:"notes,omitempty"`
	Updated            int64   `protobuf:"varint,18,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *DividentsCalendarItem) Reset() {
	*x = DividentsCalendarItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DividentsCalendarItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DividentsCalendarItem) ProtoMessage() {}

func (x *DividentsCalendarItem) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DividentsCalendarItem.ProtoReflect.Descriptor instead.
func (*DividentsCalendarItem) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{2}
}

func (x *DividentsCalendarItem) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *DividentsCalendarItem) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *DividentsCalendarItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DividentsCalendarItem) GetMic() string {
	if x != nil {
		return x.Mic
	}
	return ""
}

func (x *DividentsCalendarItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DividentsCalendarItem) GetExDividendDate() string {
	if x != nil {
		return x.ExDividendDate
	}
	return ""
}

func (x *DividentsCalendarItem) GetDividendType() string {
	if x != nil {
		return x.DividendType
	}
	return ""
}

func (x *DividentsCalendarItem) GetDividend() float64 {
	if x != nil {
		return x.Dividend
	}
	return 0
}

func (x *DividentsCalendarItem) GetDividendYield() float64 {
	if x != nil {
		return x.DividendYield
	}
	return 0
}

func (x *DividentsCalendarItem) GetDividendPrior() string {
	if x != nil {
		return x.DividendPrior
	}
	return ""
}

func (x *DividentsCalendarItem) GetDeclarationDate() string {
	if x != nil {
		return x.DeclarationDate
	}
	return ""
}

func (x *DividentsCalendarItem) GetPayableDate() string {
	if x != nil {
		return x.PayableDate
	}
	return ""
}

func (x *DividentsCalendarItem) GetRecordDate() string {
	if x != nil {
		return x.RecordDate
	}
	return ""
}

func (x *DividentsCalendarItem) GetEndRegularDividend() bool {
	if x != nil {
		return x.EndRegularDividend
	}
	return false
}

func (x *DividentsCalendarItem) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *DividentsCalendarItem) GetImportance() int32 {
	if x != nil {
		return x.Importance
	}
	return 0
}

func (x *DividentsCalendarItem) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *DividentsCalendarItem) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type GetEarningsCalendarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker        string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Date          string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	StartAt       int64  `protobuf:"varint,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt         int64  `protobuf:"varint,4,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Page          int32  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Order         string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	Cqs           string `protobuf:"bytes,8,opt,name=cqs,proto3" json:"cqs,omitempty"`
	Cik           string `protobuf:"bytes,9,opt,name=cik,proto3" json:"cik,omitempty"`
	Cusip         string `protobuf:"bytes,10,opt,name=cusip,proto3" json:"cusip,omitempty"`
	Isin          string `protobuf:"bytes,11,opt,name=isin,proto3" json:"isin,omitempty"`
	CompositeFigi string `protobuf:"bytes,12,opt,name=composite_figi,json=compositeFigi,proto3" json:"composite_figi,omitempty"`
	ShareFigi     string `protobuf:"bytes,13,opt,name=share_figi,json=shareFigi,proto3" json:"share_figi,omitempty"`
	Lei           string `protobuf:"bytes,14,opt,name=lei,proto3" json:"lei,omitempty"`
}

func (x *GetEarningsCalendarRequest) Reset() {
	*x = GetEarningsCalendarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEarningsCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEarningsCalendarRequest) ProtoMessage() {}

func (x *GetEarningsCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEarningsCalendarRequest.ProtoReflect.Descriptor instead.
func (*GetEarningsCalendarRequest) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{3}
}

func (x *GetEarningsCalendarRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *GetEarningsCalendarRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetEarningsCalendarRequest) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *GetEarningsCalendarRequest) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *GetEarningsCalendarRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetEarningsCalendarRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetEarningsCalendarRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *GetEarningsCalendarRequest) GetCqs() string {
	if x != nil {
		return x.Cqs
	}
	return ""
}

func (x *GetEarningsCalendarRequest) GetCik() string {
	if x != nil {
		return x.Cik
	}
	return ""
}

func (x *GetEarningsCalendarRequest) GetCusip() string {
	if x != nil {
		return x.Cusip
	}
	return ""
}

func (x *GetEarningsCalendarRequest) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *GetEarningsCalendarRequest) GetCompositeFigi() string {
	if x != nil {
		return x.CompositeFigi
	}
	return ""
}

func (x *GetEarningsCalendarRequest) GetShareFigi() string {
	if x != nil {
		return x.ShareFigi
	}
	return ""
}

func (x *GetEarningsCalendarRequest) GetLei() string {
	if x != nil {
		return x.Lei
	}
	return ""
}

type GetEarningsCalendarResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*EarningsCalendarItem `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetEarningsCalendarResponse) Reset() {
	*x = GetEarningsCalendarResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEarningsCalendarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEarningsCalendarResponse) ProtoMessage() {}

func (x *GetEarningsCalendarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEarningsCalendarResponse.ProtoReflect.Descriptor instead.
func (*GetEarningsCalendarResponse) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{4}
}

func (x *GetEarningsCalendarResponse) GetResult() []*EarningsCalendarItem {
	if x != nil {
		return x.Result
	}
	return nil
}

type EarningsCalendarItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency      string                        `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Date          string                        `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	DateConfirmed bool                          `protobuf:"varint,3,opt,name=date_confirmed,json=dateConfirmed,proto3" json:"date_confirmed,omitempty"`
	Eps           *EarningsCalendarItem_Eps     `protobuf:"bytes,4,opt,name=eps,proto3" json:"eps,omitempty"`
	Importance    int32                         `protobuf:"varint,5,opt,name=importance,proto3" json:"importance,omitempty"`
	Mic           string                        `protobuf:"bytes,6,opt,name=mic,proto3" json:"mic,omitempty"`
	Name          string                        `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Notes         string                        `protobuf:"bytes,8,opt,name=notes,proto3" json:"notes,omitempty"`
	Period        string                        `protobuf:"bytes,9,opt,name=period,proto3" json:"period,omitempty"`
	PeriodYear    int32                         `protobuf:"varint,10,opt,name=period_year,json=periodYear,proto3" json:"period_year,omitempty"`
	RecordId      string                        `protobuf:"bytes,11,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Revenue       *EarningsCalendarItem_Revenue `protobuf:"bytes,12,opt,name=revenue,proto3" json:"revenue,omitempty"`
	Ticker        string                        `protobuf:"bytes,13,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Time          string                        `protobuf:"bytes,14,opt,name=time,proto3" json:"time,omitempty"`
	Updated       int64                         `protobuf:"varint,15,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *EarningsCalendarItem) Reset() {
	*x = EarningsCalendarItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarningsCalendarItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarningsCalendarItem) ProtoMessage() {}

func (x *EarningsCalendarItem) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarningsCalendarItem.ProtoReflect.Descriptor instead.
func (*EarningsCalendarItem) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{5}
}

func (x *EarningsCalendarItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *EarningsCalendarItem) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *EarningsCalendarItem) GetDateConfirmed() bool {
	if x != nil {
		return x.DateConfirmed
	}
	return false
}

func (x *EarningsCalendarItem) GetEps() *EarningsCalendarItem_Eps {
	if x != nil {
		return x.Eps
	}
	return nil
}

func (x *EarningsCalendarItem) GetImportance() int32 {
	if x != nil {
		return x.Importance
	}
	return 0
}

func (x *EarningsCalendarItem) GetMic() string {
	if x != nil {
		return x.Mic
	}
	return ""
}

func (x *EarningsCalendarItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EarningsCalendarItem) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *EarningsCalendarItem) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *EarningsCalendarItem) GetPeriodYear() int32 {
	if x != nil {
		return x.PeriodYear
	}
	return 0
}

func (x *EarningsCalendarItem) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *EarningsCalendarItem) GetRevenue() *EarningsCalendarItem_Revenue {
	if x != nil {
		return x.Revenue
	}
	return nil
}

func (x *EarningsCalendarItem) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *EarningsCalendarItem) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *EarningsCalendarItem) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type GetNewsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ticker        string `protobuf:"bytes,1,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Date          string `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	StartAt       int64  `protobuf:"varint,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt         int64  `protobuf:"varint,4,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Page          int32  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Order         string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	Cqs           string `protobuf:"bytes,8,opt,name=cqs,proto3" json:"cqs,omitempty"`
	Cik           string `protobuf:"bytes,9,opt,name=cik,proto3" json:"cik,omitempty"`
	Cusip         string `protobuf:"bytes,10,opt,name=cusip,proto3" json:"cusip,omitempty"`
	Isin          string `protobuf:"bytes,11,opt,name=isin,proto3" json:"isin,omitempty"`
	CompositeFigi string `protobuf:"bytes,12,opt,name=composite_figi,json=compositeFigi,proto3" json:"composite_figi,omitempty"`
	ShareFigi     string `protobuf:"bytes,13,opt,name=share_figi,json=shareFigi,proto3" json:"share_figi,omitempty"`
	Lei           string `protobuf:"bytes,14,opt,name=lei,proto3" json:"lei,omitempty"`
}

func (x *GetNewsRequest) Reset() {
	*x = GetNewsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsRequest) ProtoMessage() {}

func (x *GetNewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsRequest.ProtoReflect.Descriptor instead.
func (*GetNewsRequest) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{6}
}

func (x *GetNewsRequest) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *GetNewsRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetNewsRequest) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *GetNewsRequest) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *GetNewsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetNewsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetNewsRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *GetNewsRequest) GetCqs() string {
	if x != nil {
		return x.Cqs
	}
	return ""
}

func (x *GetNewsRequest) GetCik() string {
	if x != nil {
		return x.Cik
	}
	return ""
}

func (x *GetNewsRequest) GetCusip() string {
	if x != nil {
		return x.Cusip
	}
	return ""
}

func (x *GetNewsRequest) GetIsin() string {
	if x != nil {
		return x.Isin
	}
	return ""
}

func (x *GetNewsRequest) GetCompositeFigi() string {
	if x != nil {
		return x.CompositeFigi
	}
	return ""
}

func (x *GetNewsRequest) GetShareFigi() string {
	if x != nil {
		return x.ShareFigi
	}
	return ""
}

func (x *GetNewsRequest) GetLei() string {
	if x != nil {
		return x.Lei
	}
	return ""
}

type GetNewsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*NewsItem `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetNewsResponse) Reset() {
	*x = GetNewsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewsResponse) ProtoMessage() {}

func (x *GetNewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewsResponse.ProtoReflect.Descriptor instead.
func (*GetNewsResponse) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{7}
}

func (x *GetNewsResponse) GetResult() []*NewsItem {
	if x != nil {
		return x.Result
	}
	return nil
}

type NewsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author    string                 `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Channels  []string               `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Images    []string               `protobuf:"bytes,4,rep,name=images,proto3" json:"images,omitempty"`
	RecordId  int32                  `protobuf:"varint,5,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Tags      []string               `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	Tickers   []string               `protobuf:"bytes,7,rep,name=tickers,proto3" json:"tickers,omitempty"`
	Title     string                 `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Url       string                 `protobuf:"bytes,10,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *NewsItem) Reset() {
	*x = NewsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsItem) ProtoMessage() {}

func (x *NewsItem) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsItem.ProtoReflect.Descriptor instead.
func (*NewsItem) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{8}
}

func (x *NewsItem) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *NewsItem) GetChannels() []string {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *NewsItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *NewsItem) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *NewsItem) GetRecordId() int32 {
	if x != nil {
		return x.RecordId
	}
	return 0
}

func (x *NewsItem) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *NewsItem) GetTickers() []string {
	if x != nil {
		return x.Tickers
	}
	return nil
}

func (x *NewsItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsItem) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *NewsItem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type GetIPORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartAt  int64  `protobuf:"varint,3,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt    int64  `protobuf:"varint,4,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	Page     int32  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Order    string `protobuf:"bytes,7,opt,name=order,proto3" json:"order,omitempty"`
	Exchange string `protobuf:"bytes,15,opt,name=exchange,proto3" json:"exchange,omitempty"`
}

func (x *GetIPORequest) Reset() {
	*x = GetIPORequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIPORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIPORequest) ProtoMessage() {}

func (x *GetIPORequest) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIPORequest.ProtoReflect.Descriptor instead.
func (*GetIPORequest) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{9}
}

func (x *GetIPORequest) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *GetIPORequest) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *GetIPORequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetIPORequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetIPORequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *GetIPORequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

type GetIPOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipos []*IPOItem `protobuf:"bytes,1,rep,name=ipos,proto3" json:"ipos,omitempty"`
}

func (x *GetIPOResponse) Reset() {
	*x = GetIPOResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIPOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIPOResponse) ProtoMessage() {}

func (x *GetIPOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIPOResponse.ProtoReflect.Descriptor instead.
func (*GetIPOResponse) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{10}
}

func (x *GetIPOResponse) GetIpos() []*IPOItem {
	if x != nil {
		return x.Ipos
	}
	return nil
}

type IPOItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecordId                       string   `protobuf:"bytes,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Ticker                         string   `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	Name                           string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Mic                            string   `protobuf:"bytes,4,opt,name=mic,proto3" json:"mic,omitempty"`
	Currency                       string   `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	Date                           string   `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	OpenDateVerified               bool     `protobuf:"varint,7,opt,name=open_date_verified,json=openDateVerified,proto3" json:"open_date_verified,omitempty"`
	Time                           string   `protobuf:"bytes,8,opt,name=time,proto3" json:"time,omitempty"`
	PriceMax                       float64  `protobuf:"fixed64,9,opt,name=price_max,json=priceMax,proto3" json:"price_max,omitempty"`
	PriceMin                       float64  `protobuf:"fixed64,10,opt,name=price_min,json=priceMin,proto3" json:"price_min,omitempty"`
	PriceOpen                      float64  `protobuf:"fixed64,11,opt,name=price_open,json=priceOpen,proto3" json:"price_open,omitempty"`
	PricePublicOffering            float64  `protobuf:"fixed64,12,opt,name=price_public_offering,json=pricePublicOffering,proto3" json:"price_public_offering,omitempty"`
	OfferingShares                 float64  `protobuf:"fixed64,13,opt,name=offering_shares,json=offeringShares,proto3" json:"offering_shares,omitempty"`
	OfferingSharesOrdAdr           float64  `protobuf:"fixed64,14,opt,name=offering_shares_ord_adr,json=offeringSharesOrdAdr,proto3" json:"offering_shares_ord_adr,omitempty"`
	OfferingValue                  float64  `protobuf:"fixed64,15,opt,name=offering_value,json=offeringValue,proto3" json:"offering_value,omitempty"`
	OrdSharesOutAfterOffer         float64  `protobuf:"fixed64,16,opt,name=ord_shares_out_after_offer,json=ordSharesOutAfterOffer,proto3" json:"ord_shares_out_after_offer,omitempty"`
	MarketCapAtOffer               float64  `protobuf:"fixed64,17,opt,name=market_cap_at_offer,json=marketCapAtOffer,proto3" json:"market_cap_at_offer,omitempty"`
	DealStatus                     string   `protobuf:"bytes,18,opt,name=deal_status,json=dealStatus,proto3" json:"deal_status,omitempty"`
	InitialFilingDate              string   `protobuf:"bytes,19,opt,name=initial_filing_date,json=initialFilingDate,proto3" json:"initial_filing_date,omitempty"`
	InsiderLockupDate              string   `protobuf:"bytes,20,opt,name=insider_lockup_date,json=insiderLockupDate,proto3" json:"insider_lockup_date,omitempty"`
	InsiderLockupDays              int32    `protobuf:"varint,21,opt,name=insider_lockup_days,json=insiderLockupDays,proto3" json:"insider_lockup_days,omitempty"`
	IpoType                        string   `protobuf:"bytes,22,opt,name=ipo_type,json=ipoType,proto3" json:"ipo_type,omitempty"`
	LastYrIncome                   float64  `protobuf:"fixed64,23,opt,name=last_yr_income,json=lastYrIncome,proto3" json:"last_yr_income,omitempty"`
	LastYrIncomeYear               float64  `protobuf:"fixed64,24,opt,name=last_yr_income_year,json=lastYrIncomeYear,proto3" json:"last_yr_income_year,omitempty"`
	LastYrRevenue                  float64  `protobuf:"fixed64,25,opt,name=last_yr_revenue,json=lastYrRevenue,proto3" json:"last_yr_revenue,omitempty"`
	LastYrRevenueYear              float64  `protobuf:"fixed64,26,opt,name=last_yr_revenue_year,json=lastYrRevenueYear,proto3" json:"last_yr_revenue_year,omitempty"`
	LeadUnderwriters               []string `protobuf:"bytes,27,rep,name=lead_underwriters,json=leadUnderwriters,proto3" json:"lead_underwriters,omitempty"`
	OtherUnderwriters              []string `protobuf:"bytes,28,rep,name=other_underwriters,json=otherUnderwriters,proto3" json:"other_underwriters,omitempty"`
	Notes                          string   `protobuf:"bytes,29,opt,name=notes,proto3" json:"notes,omitempty"`
	PricingDate                    string   `protobuf:"bytes,30,opt,name=pricing_date,json=pricingDate,proto3" json:"pricing_date,omitempty"`
	SecAccessionNumber             string   `protobuf:"bytes,31,opt,name=sec_accession_number,json=secAccessionNumber,proto3" json:"sec_accession_number,omitempty"`
	SecFilingUrl                   string   `protobuf:"bytes,32,opt,name=sec_filing_url,json=secFilingUrl,proto3" json:"sec_filing_url,omitempty"`
	SharesOutstanding              float64  `protobuf:"fixed64,33,opt,name=shares_outstanding,json=sharesOutstanding,proto3" json:"shares_outstanding,omitempty"`
	Sic                            float64  `protobuf:"fixed64,34,opt,name=sic,proto3" json:"sic,omitempty"`
	SpacConvertedToTarget          bool     `protobuf:"varint,35,opt,name=spac_converted_to_target,json=spacConvertedToTarget,proto3" json:"spac_converted_to_target,omitempty"`
	StateLocation                  string   `protobuf:"bytes,36,opt,name=state_location,json=stateLocation,proto3" json:"state_location,omitempty"`
	UnderwriterQuietExpirationDate string   `protobuf:"bytes,37,opt,name=underwriter_quiet_expiration_date,json=underwriterQuietExpirationDate,proto3" json:"underwriter_quiet_expiration_date,omitempty"`
	UnderwriterQuietExpirationDays int32    `protobuf:"varint,38,opt,name=underwriter_quiet_expiration_days,json=underwriterQuietExpirationDays,proto3" json:"underwriter_quiet_expiration_days,omitempty"`
	Updated                        int64    `protobuf:"varint,39,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *IPOItem) Reset() {
	*x = IPOItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPOItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPOItem) ProtoMessage() {}

func (x *IPOItem) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPOItem.ProtoReflect.Descriptor instead.
func (*IPOItem) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{11}
}

func (x *IPOItem) GetRecordId() string {
	if x != nil {
		return x.RecordId
	}
	return ""
}

func (x *IPOItem) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *IPOItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IPOItem) GetMic() string {
	if x != nil {
		return x.Mic
	}
	return ""
}

func (x *IPOItem) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *IPOItem) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *IPOItem) GetOpenDateVerified() bool {
	if x != nil {
		return x.OpenDateVerified
	}
	return false
}

func (x *IPOItem) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *IPOItem) GetPriceMax() float64 {
	if x != nil {
		return x.PriceMax
	}
	return 0
}

func (x *IPOItem) GetPriceMin() float64 {
	if x != nil {
		return x.PriceMin
	}
	return 0
}

func (x *IPOItem) GetPriceOpen() float64 {
	if x != nil {
		return x.PriceOpen
	}
	return 0
}

func (x *IPOItem) GetPricePublicOffering() float64 {
	if x != nil {
		return x.PricePublicOffering
	}
	return 0
}

func (x *IPOItem) GetOfferingShares() float64 {
	if x != nil {
		return x.OfferingShares
	}
	return 0
}

func (x *IPOItem) GetOfferingSharesOrdAdr() float64 {
	if x != nil {
		return x.OfferingSharesOrdAdr
	}
	return 0
}

func (x *IPOItem) GetOfferingValue() float64 {
	if x != nil {
		return x.OfferingValue
	}
	return 0
}

func (x *IPOItem) GetOrdSharesOutAfterOffer() float64 {
	if x != nil {
		return x.OrdSharesOutAfterOffer
	}
	return 0
}

func (x *IPOItem) GetMarketCapAtOffer() float64 {
	if x != nil {
		return x.MarketCapAtOffer
	}
	return 0
}

func (x *IPOItem) GetDealStatus() string {
	if x != nil {
		return x.DealStatus
	}
	return ""
}

func (x *IPOItem) GetInitialFilingDate() string {
	if x != nil {
		return x.InitialFilingDate
	}
	return ""
}

func (x *IPOItem) GetInsiderLockupDate() string {
	if x != nil {
		return x.InsiderLockupDate
	}
	return ""
}

func (x *IPOItem) GetInsiderLockupDays() int32 {
	if x != nil {
		return x.InsiderLockupDays
	}
	return 0
}

func (x *IPOItem) GetIpoType() string {
	if x != nil {
		return x.IpoType
	}
	return ""
}

func (x *IPOItem) GetLastYrIncome() float64 {
	if x != nil {
		return x.LastYrIncome
	}
	return 0
}

func (x *IPOItem) GetLastYrIncomeYear() float64 {
	if x != nil {
		return x.LastYrIncomeYear
	}
	return 0
}

func (x *IPOItem) GetLastYrRevenue() float64 {
	if x != nil {
		return x.LastYrRevenue
	}
	return 0
}

func (x *IPOItem) GetLastYrRevenueYear() float64 {
	if x != nil {
		return x.LastYrRevenueYear
	}
	return 0
}

func (x *IPOItem) GetLeadUnderwriters() []string {
	if x != nil {
		return x.LeadUnderwriters
	}
	return nil
}

func (x *IPOItem) GetOtherUnderwriters() []string {
	if x != nil {
		return x.OtherUnderwriters
	}
	return nil
}

func (x *IPOItem) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *IPOItem) GetPricingDate() string {
	if x != nil {
		return x.PricingDate
	}
	return ""
}

func (x *IPOItem) GetSecAccessionNumber() string {
	if x != nil {
		return x.SecAccessionNumber
	}
	return ""
}

func (x *IPOItem) GetSecFilingUrl() string {
	if x != nil {
		return x.SecFilingUrl
	}
	return ""
}

func (x *IPOItem) GetSharesOutstanding() float64 {
	if x != nil {
		return x.SharesOutstanding
	}
	return 0
}

func (x *IPOItem) GetSic() float64 {
	if x != nil {
		return x.Sic
	}
	return 0
}

func (x *IPOItem) GetSpacConvertedToTarget() bool {
	if x != nil {
		return x.SpacConvertedToTarget
	}
	return false
}

func (x *IPOItem) GetStateLocation() string {
	if x != nil {
		return x.StateLocation
	}
	return ""
}

func (x *IPOItem) GetUnderwriterQuietExpirationDate() string {
	if x != nil {
		return x.UnderwriterQuietExpirationDate
	}
	return ""
}

func (x *IPOItem) GetUnderwriterQuietExpirationDays() int32 {
	if x != nil {
		return x.UnderwriterQuietExpirationDays
	}
	return 0
}

func (x *IPOItem) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type EarningsCalendarItem_Eps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Estimated       float64 `protobuf:"fixed64,1,opt,name=estimated,proto3" json:"estimated,omitempty"`
	Prior           float64 `protobuf:"fixed64,2,opt,name=prior,proto3" json:"prior,omitempty"`
	Reported        float64 `protobuf:"fixed64,3,opt,name=reported,proto3" json:"reported,omitempty"`
	Surprise        float64 `protobuf:"fixed64,4,opt,name=surprise,proto3" json:"surprise,omitempty"`
	SurprisePercent float64 `protobuf:"fixed64,5,opt,name=surprise_percent,json=surprisePercent,proto3" json:"surprise_percent,omitempty"`
	Type            string  `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *EarningsCalendarItem_Eps) Reset() {
	*x = EarningsCalendarItem_Eps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarningsCalendarItem_Eps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarningsCalendarItem_Eps) ProtoMessage() {}

func (x *EarningsCalendarItem_Eps) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarningsCalendarItem_Eps.ProtoReflect.Descriptor instead.
func (*EarningsCalendarItem_Eps) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{5, 0}
}

func (x *EarningsCalendarItem_Eps) GetEstimated() float64 {
	if x != nil {
		return x.Estimated
	}
	return 0
}

func (x *EarningsCalendarItem_Eps) GetPrior() float64 {
	if x != nil {
		return x.Prior
	}
	return 0
}

func (x *EarningsCalendarItem_Eps) GetReported() float64 {
	if x != nil {
		return x.Reported
	}
	return 0
}

func (x *EarningsCalendarItem_Eps) GetSurprise() float64 {
	if x != nil {
		return x.Surprise
	}
	return 0
}

func (x *EarningsCalendarItem_Eps) GetSurprisePercent() float64 {
	if x != nil {
		return x.SurprisePercent
	}
	return 0
}

func (x *EarningsCalendarItem_Eps) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type EarningsCalendarItem_Revenue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Estimated       float64 `protobuf:"fixed64,1,opt,name=estimated,proto3" json:"estimated,omitempty"`
	Prior           float64 `protobuf:"fixed64,2,opt,name=prior,proto3" json:"prior,omitempty"`
	Reported        float64 `protobuf:"fixed64,3,opt,name=reported,proto3" json:"reported,omitempty"`
	Surprise        float64 `protobuf:"fixed64,4,opt,name=surprise,proto3" json:"surprise,omitempty"`
	SurprisePercent float64 `protobuf:"fixed64,5,opt,name=surprise_percent,json=surprisePercent,proto3" json:"surprise_percent,omitempty"`
	Type            string  `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *EarningsCalendarItem_Revenue) Reset() {
	*x = EarningsCalendarItem_Revenue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_benzinga_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarningsCalendarItem_Revenue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarningsCalendarItem_Revenue) ProtoMessage() {}

func (x *EarningsCalendarItem_Revenue) ProtoReflect() protoreflect.Message {
	mi := &file_benzinga_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarningsCalendarItem_Revenue.ProtoReflect.Descriptor instead.
func (*EarningsCalendarItem_Revenue) Descriptor() ([]byte, []int) {
	return file_benzinga_proto_rawDescGZIP(), []int{5, 1}
}

func (x *EarningsCalendarItem_Revenue) GetEstimated() float64 {
	if x != nil {
		return x.Estimated
	}
	return 0
}

func (x *EarningsCalendarItem_Revenue) GetPrior() float64 {
	if x != nil {
		return x.Prior
	}
	return 0
}

func (x *EarningsCalendarItem_Revenue) GetReported() float64 {
	if x != nil {
		return x.Reported
	}
	return 0
}

func (x *EarningsCalendarItem_Revenue) GetSurprise() float64 {
	if x != nil {
		return x.Surprise
	}
	return 0
}

func (x *EarningsCalendarItem_Revenue) GetSurprisePercent() float64 {
	if x != nil {
		return x.SurprisePercent
	}
	return 0
}

func (x *EarningsCalendarItem_Revenue) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_benzinga_proto protoreflect.FileDescriptor

var file_benzinga_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x62, 0x65, 0x6e, 0x7a, 0x69, 0x6e, 0x67, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x02, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x71, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x71,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x69, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x69, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65,
	0x46, 0x69, 0x67, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x66, 0x69,
	0x67, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46,
	0x69, 0x67, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6c, 0x65, 0x69, 0x22, 0x56, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xd6, 0x04,
	0x0a, 0x15, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x44, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x59, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x61, 0x62, 0x6c,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xe7, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x45, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e,
	0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x71,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x71, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x69, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63,
	0x75, 0x73, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x46, 0x69, 0x67, 0x69, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x69, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x67, 0x69, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x65, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x65, 0x69,
	0x22, 0x54, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc5, 0x06, 0x0a, 0x14, 0x45, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x03, 0x65, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x45, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x2e, 0x45, 0x70, 0x73, 0x52, 0x03, 0x65, 0x70, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x69, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x1a, 0xb0, 0x01, 0x0a, 0x03, 0x45, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x73, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x75, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xb4, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x75, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x70, 0x72,
	0x69, 0x73, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdb,
	0x02, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x71, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x71, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x6b, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x75,
	0x73, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x75, 0x73, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x69, 0x73, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x5f, 0x66, 0x69, 0x67, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x46, 0x69, 0x67, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x67, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x68, 0x61, 0x72, 0x65, 0x46, 0x69, 0x67, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65,
	0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x65, 0x69, 0x22, 0x3c, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbf, 0x02, 0x0a, 0x08, 0x4e,
	0x65, 0x77, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xa4, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x49, 0x50, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x50, 0x4f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x70, 0x6f, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x49, 0x50,
	0x4f, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x70, 0x6f, 0x73, 0x22, 0x8d, 0x0c, 0x0a, 0x07,
	0x49, 0x50, 0x4f, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x6f, 0x70, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61,
	0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x78, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x32, 0x0a,
	0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x72,
	0x64, 0x5f, 0x61, 0x64, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x41, 0x64,
	0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x6f, 0x72,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63,
	0x61, 0x70, 0x5f, 0x61, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x70, 0x41, 0x74, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x6c, 0x6f, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x75, 0x70,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x70, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x79, 0x72, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x59, 0x72, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x79, 0x72,
	0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x59, 0x72, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x59, 0x65, 0x61, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x79, 0x72, 0x5f,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6c,
	0x61, 0x73, 0x74, 0x59, 0x72, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x14,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x79, 0x72, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x59, 0x72, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x59, 0x65, 0x61, 0x72, 0x12, 0x2b, 0x0a,
	0x11, 0x6c, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x65, 0x61, 0x64, 0x55, 0x6e,
	0x64, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x73, 0x65, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x5f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x75,
	0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x63,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x69, 0x63, 0x12, 0x37, 0x0a, 0x18, 0x73,
	0x70, 0x61, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73,
	0x70, 0x61, 0x63, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x21, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x69, 0x65, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x51, 0x75, 0x69, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x21, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x69, 0x65, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1e, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x72, 0x51, 0x75,
	0x69, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x32, 0xd9, 0x02, 0x0a, 0x0f,
	0x42, 0x65, 0x6e, 0x7a, 0x69, 0x6e, 0x67, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x65, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x24, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x23, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x17, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x49, 0x50, 0x4f, 0x12, 0x16, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x50, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x7a, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x50, 0x4f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_benzinga_proto_rawDescOnce sync.Once
	file_benzinga_proto_rawDescData = file_benzinga_proto_rawDesc
)

func file_benzinga_proto_rawDescGZIP() []byte {
	file_benzinga_proto_rawDescOnce.Do(func() {
		file_benzinga_proto_rawDescData = protoimpl.X.CompressGZIP(file_benzinga_proto_rawDescData)
	})
	return file_benzinga_proto_rawDescData
}

var file_benzinga_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_benzinga_proto_goTypes = []interface{}{
	(*GetDividentsCalendarRequest)(nil),  // 0: finazon.GetDividentsCalendarRequest
	(*GetDividentsCalendarResponse)(nil), // 1: finazon.GetDividentsCalendarResponse
	(*DividentsCalendarItem)(nil),        // 2: finazon.DividentsCalendarItem
	(*GetEarningsCalendarRequest)(nil),   // 3: finazon.GetEarningsCalendarRequest
	(*GetEarningsCalendarResponse)(nil),  // 4: finazon.GetEarningsCalendarResponse
	(*EarningsCalendarItem)(nil),         // 5: finazon.EarningsCalendarItem
	(*GetNewsRequest)(nil),               // 6: finazon.GetNewsRequest
	(*GetNewsResponse)(nil),              // 7: finazon.GetNewsResponse
	(*NewsItem)(nil),                     // 8: finazon.NewsItem
	(*GetIPORequest)(nil),                // 9: finazon.GetIPORequest
	(*GetIPOResponse)(nil),               // 10: finazon.GetIPOResponse
	(*IPOItem)(nil),                      // 11: finazon.IPOItem
	(*EarningsCalendarItem_Eps)(nil),     // 12: finazon.EarningsCalendarItem.Eps
	(*EarningsCalendarItem_Revenue)(nil), // 13: finazon.EarningsCalendarItem.Revenue
	(*timestamppb.Timestamp)(nil),        // 14: google.protobuf.Timestamp
}
var file_benzinga_proto_depIdxs = []int32{
	2,  // 0: finazon.GetDividentsCalendarResponse.result:type_name -> finazon.DividentsCalendarItem
	5,  // 1: finazon.GetEarningsCalendarResponse.result:type_name -> finazon.EarningsCalendarItem
	12, // 2: finazon.EarningsCalendarItem.eps:type_name -> finazon.EarningsCalendarItem.Eps
	13, // 3: finazon.EarningsCalendarItem.revenue:type_name -> finazon.EarningsCalendarItem.Revenue
	8,  // 4: finazon.GetNewsResponse.result:type_name -> finazon.NewsItem
	14, // 5: finazon.NewsItem.created_at:type_name -> google.protobuf.Timestamp
	14, // 6: finazon.NewsItem.updated_at:type_name -> google.protobuf.Timestamp
	11, // 7: finazon.GetIPOResponse.ipos:type_name -> finazon.IPOItem
	0,  // 8: finazon.BenzingaService.GetDividentsCalendar:input_type -> finazon.GetDividentsCalendarRequest
	3,  // 9: finazon.BenzingaService.GetEarningsCalendar:input_type -> finazon.GetEarningsCalendarRequest
	6,  // 10: finazon.BenzingaService.GetNews:input_type -> finazon.GetNewsRequest
	9,  // 11: finazon.BenzingaService.GetIPO:input_type -> finazon.GetIPORequest
	1,  // 12: finazon.BenzingaService.GetDividentsCalendar:output_type -> finazon.GetDividentsCalendarResponse
	4,  // 13: finazon.BenzingaService.GetEarningsCalendar:output_type -> finazon.GetEarningsCalendarResponse
	7,  // 14: finazon.BenzingaService.GetNews:output_type -> finazon.GetNewsResponse
	10, // 15: finazon.BenzingaService.GetIPO:output_type -> finazon.GetIPOResponse
	12, // [12:16] is the sub-list for method output_type
	8,  // [8:12] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_benzinga_proto_init() }
func file_benzinga_proto_init() {
	if File_benzinga_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_benzinga_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividentsCalendarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benzinga_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDividentsCalendarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benzinga_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DividentsCalendarItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benzinga_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEarningsCalendarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benzinga_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEarningsCalendarResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benzinga_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarningsCalendarItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benzinga_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benzinga_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNewsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benzinga_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benzinga_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIPORequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benzinga_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIPOResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benzinga_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPOItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benzinga_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarningsCalendarItem_Eps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_benzinga_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarningsCalendarItem_Revenue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_benzinga_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_benzinga_proto_goTypes,
		DependencyIndexes: file_benzinga_proto_depIdxs,
		MessageInfos:      file_benzinga_proto_msgTypes,
	}.Build()
	File_benzinga_proto = out.File
	file_benzinga_proto_rawDesc = nil
	file_benzinga_proto_goTypes = nil
	file_benzinga_proto_depIdxs = nil
}
