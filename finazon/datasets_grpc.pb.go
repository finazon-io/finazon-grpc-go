// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: datasets.proto

package finazon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DatasetsService_GetDatasets_FullMethodName = "/finazon.DatasetsService/GetDatasets"
)

// DatasetsServiceClient is the client API for DatasetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetsServiceClient interface {
	// Get a list of all datasets available at Finazon.
	GetDatasets(ctx context.Context, in *GetDatasetsRequest, opts ...grpc.CallOption) (*GetDatasetsResponse, error)
}

type datasetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetsServiceClient(cc grpc.ClientConnInterface) DatasetsServiceClient {
	return &datasetsServiceClient{cc}
}

func (c *datasetsServiceClient) GetDatasets(ctx context.Context, in *GetDatasetsRequest, opts ...grpc.CallOption) (*GetDatasetsResponse, error) {
	out := new(GetDatasetsResponse)
	err := c.cc.Invoke(ctx, DatasetsService_GetDatasets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatasetsServiceServer is the server API for DatasetsService service.
// All implementations must embed UnimplementedDatasetsServiceServer
// for forward compatibility
type DatasetsServiceServer interface {
	// Get a list of all datasets available at Finazon.
	GetDatasets(context.Context, *GetDatasetsRequest) (*GetDatasetsResponse, error)
	mustEmbedUnimplementedDatasetsServiceServer()
}

// UnimplementedDatasetsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDatasetsServiceServer struct {
}

func (UnimplementedDatasetsServiceServer) GetDatasets(context.Context, *GetDatasetsRequest) (*GetDatasetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatasets not implemented")
}
func (UnimplementedDatasetsServiceServer) mustEmbedUnimplementedDatasetsServiceServer() {}

// UnsafeDatasetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetsServiceServer will
// result in compilation errors.
type UnsafeDatasetsServiceServer interface {
	mustEmbedUnimplementedDatasetsServiceServer()
}

func RegisterDatasetsServiceServer(s grpc.ServiceRegistrar, srv DatasetsServiceServer) {
	s.RegisterService(&DatasetsService_ServiceDesc, srv)
}

func _DatasetsService_GetDatasets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatasetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetsServiceServer).GetDatasets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatasetsService_GetDatasets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetsServiceServer).GetDatasets(ctx, req.(*GetDatasetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatasetsService_ServiceDesc is the grpc.ServiceDesc for DatasetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finazon.DatasetsService",
	HandlerType: (*DatasetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDatasets",
			Handler:    _DatasetsService_GetDatasets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datasets.proto",
}
