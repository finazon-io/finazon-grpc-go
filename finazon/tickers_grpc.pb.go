// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: tickers.proto

package finazon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TickersService_FindTickersStocks_FullMethodName = "/finazon.TickersService/FindTickersStocks"
	TickersService_FindTickersCrypto_FullMethodName = "/finazon.TickersService/FindTickersCrypto"
	TickersService_FindTickersForex_FullMethodName  = "/finazon.TickersService/FindTickersForex"
	TickersService_FindTickerUS_FullMethodName      = "/finazon.TickersService/FindTickerUS"
)

// TickersServiceClient is the client API for TickersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickersServiceClient interface {
	// This API call returns an array of stocks tickers available at Finazon Data API. This list is updated daily.
	FindTickersStocks(ctx context.Context, in *FindTickersStocksRequest, opts ...grpc.CallOption) (*FindTickerStocksResponse, error)
	// This API call returns an array of crypto tickers available at Finazon Data API. This list is updated daily.
	FindTickersCrypto(ctx context.Context, in *FindTickersCryptoRequest, opts ...grpc.CallOption) (*FindTickerCryptoResponse, error)
	// This API call returns an array of forex tickers available at Finazon Data API. This list is updated daily.
	FindTickersForex(ctx context.Context, in *FindTickersForexRequest, opts ...grpc.CallOption) (*FindTickerForexResponse, error)
	// This API call returns an array of US tickers available at Finazon Data API. This list is updated daily.
	FindTickerUS(ctx context.Context, in *FindTickerUSRequest, opts ...grpc.CallOption) (*FindTickerUSResponse, error)
}

type tickersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTickersServiceClient(cc grpc.ClientConnInterface) TickersServiceClient {
	return &tickersServiceClient{cc}
}

func (c *tickersServiceClient) FindTickersStocks(ctx context.Context, in *FindTickersStocksRequest, opts ...grpc.CallOption) (*FindTickerStocksResponse, error) {
	out := new(FindTickerStocksResponse)
	err := c.cc.Invoke(ctx, TickersService_FindTickersStocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickersServiceClient) FindTickersCrypto(ctx context.Context, in *FindTickersCryptoRequest, opts ...grpc.CallOption) (*FindTickerCryptoResponse, error) {
	out := new(FindTickerCryptoResponse)
	err := c.cc.Invoke(ctx, TickersService_FindTickersCrypto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickersServiceClient) FindTickersForex(ctx context.Context, in *FindTickersForexRequest, opts ...grpc.CallOption) (*FindTickerForexResponse, error) {
	out := new(FindTickerForexResponse)
	err := c.cc.Invoke(ctx, TickersService_FindTickersForex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickersServiceClient) FindTickerUS(ctx context.Context, in *FindTickerUSRequest, opts ...grpc.CallOption) (*FindTickerUSResponse, error) {
	out := new(FindTickerUSResponse)
	err := c.cc.Invoke(ctx, TickersService_FindTickerUS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickersServiceServer is the server API for TickersService service.
// All implementations must embed UnimplementedTickersServiceServer
// for forward compatibility
type TickersServiceServer interface {
	// This API call returns an array of stocks tickers available at Finazon Data API. This list is updated daily.
	FindTickersStocks(context.Context, *FindTickersStocksRequest) (*FindTickerStocksResponse, error)
	// This API call returns an array of crypto tickers available at Finazon Data API. This list is updated daily.
	FindTickersCrypto(context.Context, *FindTickersCryptoRequest) (*FindTickerCryptoResponse, error)
	// This API call returns an array of forex tickers available at Finazon Data API. This list is updated daily.
	FindTickersForex(context.Context, *FindTickersForexRequest) (*FindTickerForexResponse, error)
	// This API call returns an array of US tickers available at Finazon Data API. This list is updated daily.
	FindTickerUS(context.Context, *FindTickerUSRequest) (*FindTickerUSResponse, error)
	mustEmbedUnimplementedTickersServiceServer()
}

// UnimplementedTickersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTickersServiceServer struct {
}

func (UnimplementedTickersServiceServer) FindTickersStocks(context.Context, *FindTickersStocksRequest) (*FindTickerStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTickersStocks not implemented")
}
func (UnimplementedTickersServiceServer) FindTickersCrypto(context.Context, *FindTickersCryptoRequest) (*FindTickerCryptoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTickersCrypto not implemented")
}
func (UnimplementedTickersServiceServer) FindTickersForex(context.Context, *FindTickersForexRequest) (*FindTickerForexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTickersForex not implemented")
}
func (UnimplementedTickersServiceServer) FindTickerUS(context.Context, *FindTickerUSRequest) (*FindTickerUSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindTickerUS not implemented")
}
func (UnimplementedTickersServiceServer) mustEmbedUnimplementedTickersServiceServer() {}

// UnsafeTickersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickersServiceServer will
// result in compilation errors.
type UnsafeTickersServiceServer interface {
	mustEmbedUnimplementedTickersServiceServer()
}

func RegisterTickersServiceServer(s grpc.ServiceRegistrar, srv TickersServiceServer) {
	s.RegisterService(&TickersService_ServiceDesc, srv)
}

func _TickersService_FindTickersStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTickersStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickersServiceServer).FindTickersStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickersService_FindTickersStocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickersServiceServer).FindTickersStocks(ctx, req.(*FindTickersStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TickersService_FindTickersCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTickersCryptoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickersServiceServer).FindTickersCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickersService_FindTickersCrypto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickersServiceServer).FindTickersCrypto(ctx, req.(*FindTickersCryptoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TickersService_FindTickersForex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTickersForexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickersServiceServer).FindTickersForex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickersService_FindTickersForex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickersServiceServer).FindTickersForex(ctx, req.(*FindTickersForexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TickersService_FindTickerUS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindTickerUSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickersServiceServer).FindTickerUS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TickersService_FindTickerUS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickersServiceServer).FindTickerUS(ctx, req.(*FindTickerUSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TickersService_ServiceDesc is the grpc.ServiceDesc for TickersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TickersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "finazon.TickersService",
	HandlerType: (*TickersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindTickersStocks",
			Handler:    _TickersService_FindTickersStocks_Handler,
		},
		{
			MethodName: "FindTickersCrypto",
			Handler:    _TickersService_FindTickersCrypto_Handler,
		},
		{
			MethodName: "FindTickersForex",
			Handler:    _TickersService_FindTickersForex_Handler,
		},
		{
			MethodName: "FindTickerUS",
			Handler:    _TickersService_FindTickerUS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tickers.proto",
}
